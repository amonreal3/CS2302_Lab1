#Adrian Monreal 80570881#
#Lab 1#
#DUE DATE 02/08/2019#

import math
import numpy as np
import matplotlib.pyplot as plt

def draw_squares(ax, n, p, w):
    if n>0:
        #has to call again until there are no more sqaures in the corner
        i1 = [1, 2, 3, 0, 1]
        q = p*w + p[i1]*(1-w)
        ax.plot(p[:,0],p[:,1],color='k')
        draw_squares(ax,n-1,q,w)

plt.close("all")
orig_size = 800
p = np.array([[0,0],[0,orig_size],[orig_size,orig_size],[orig_size,0],[0,0]])
fig, ax = plt.subplots()
draw_squares(ax, 15, p, .8)
ax.set_aspect(1.0)
ax.axis('off')
plt.show()
fig.savefig('squares.png')



def circle(center, rad):
    n = int(4 * rad * math.pi)
    t = np.linspace(0, 6.3, n)
    x = center[0] + rad * np.sin(t)
    y = center[1] + rad * np.cos(t)
    return x, y


def draw_circles(ax, n, center, radius, w):
    if n > 0:
        x, y = circle(center, radius)
        ax.plot(x, y, color='k')
        draw_circles(ax, n - 1, center, radius * w, w)


plt.close("all")
fig, ax = plt.subplots()
draw_circles(ax, 100, [100, 0], 100, .9)
ax.set_aspect(1.0)
ax.axis('off')
plt.show()
fig.savefig('circles.png')

def draw_corner_squares(center, radius):
#this function is a helper function for corner squares, this draws the square
#so that when corner_squares calls it, it will draw a square everytime corner squares does a recursive call
#it creates an array of points in relation to the center point that are essentially the corners

        corners = np.array([[center[0]-radius, center[1]+ radius],[center[0]+radius, center[1]+radius],
                            [center[0]+radius, center[1]-radius],[center[0]-radius,center[1]-radius],
                            [center[0]-radius,center[1]+radius]])
        ax.plot(corners[:,0],corners[:,1],color='k')
        #draw_corner_squares(center,radius)

def corner_squares(ax, n,center,radius ):
    #this function has 4 recursive calls each of which uses the corner in relation to the center coordinate
    #there names are as follows
    #the radius shrinks by 1/2 because the amount space is cut in half
    if n>0:
        topL= [center[0]-radius,center[1]+radius]
        topR= [center[0]+radius,center[1]+radius]
        botL= [center[0]-radius,center[1]-radius]
        botR= [center[0]+radius,center[1]-radius]
        draw_corner_squares(center,radius)
        corner_squares(ax,n-1,topL,radius/2)
        corner_squares(ax,n-1,topR,radius/2)
        corner_squares(ax,n-1,botL,radius/2)
        corner_squares(ax,n-1,botR,radius/2)

plt.close("all")



fig, ax = plt.subplots()
corner_squares(ax, 3,[0,0],50)
ax.set_aspect(1.0)
ax.axis('off')
plt.show()
fig.savefig('corner_squares.png')



def draw_tunnel(ax, n, center, radius,w):
    #the logic behind this one was if you move the center of the circle to the one of the sides of the
    #circle it will create a tunnel effect, so i basically added the center to the radius
    #to have the circle create a circle around the edge


    if n > 0:
        x, y = circle(center, radius)
        x = x + radius
        ax.plot(x, y, color='k')
        draw_tunnel(ax, n - 1, center, radius * w,w)

plt.close("all")
fig, ax = plt.subplots()
draw_tunnel(ax, 100, [100, 0], 100,.9)
ax.set_aspect(1.0)
ax.axis('off')
plt.show()
fig.savefig('tunnel.png')

def draw_trees(ax, n, x,y,delta_y,delta_x):

    #in this fuinction it creates an array of coordinates to plot the tree
    #the first coordinate is the left most branch the middle is the top point and
    #the last is the vertex of the right branch
    #the 2 recursive calls are for the 2 branches one to the right of the point
    # and the other to the left of the point but both with y_delta which is the change in Y

    if n>0:

        tree_array = np.array([[x-delta_x, y-delta_y],[x, y], [x+delta_x, y-delta_y]])
        ax.plot(tree_array[:, 0], tree_array[:, 1], color='k')
        draw_trees(ax,n-1,x-delta_x,y-delta_y,delta_y,delta_x/2)
        draw_trees(ax,n-1,x+ delta_x,y-delta_y,delta_y,delta_x/2)

plt.close("all")
fig, ax = plt.subplots()
num_trees= 7
deltaY= 100
deltaX= (num_trees*deltaY)/4
draw_trees(ax,num_trees,0,0,deltaY,deltaX)

ax.set_aspect(1.0)
ax.axis('off')
plt.show()
fig.savefig('trees.png')

def draw_circle_inside(center, rad):

    #this function is similar to the draw squares function this function helps split the problem
    #into 2 functions this one just creates the circle

    n = int(4 * rad * math.pi)
    t = np.linspace(0, 6.3, n)
    x = center[0] + rad * np.sin(t)
    y = center[1] + rad * np.cos(t)
    ax.plot(x, y, color='k')

def circle_inside(ax,n,center,radius):

    #this is the second half of the problem this actually gets the points of the
            #center of the circle so it can create the radius in relationto the point
    # the radius is  divided by 3 because of how many circles you fit
    #       along the axis either x or y its always 3
    # it creates 4 different arrays of the circles to correspond to the center of where
        #the circle would be in correlation of the first circle center point

    if n > 0:
        #five calls x- 2/3 radius y-+ 2/3 or 1/3 of radius )
        #radius is shrunk by 1/3
        leftCircle = [center[0]-(.6666*radius),center[1]]
        rightCircle = [center[0]+(.6666*radius),center[1]]
        topCircle = [center[0],center[1]+(.6666*radius)]
        bottomCircle = [center[0],center[1]-(.6666*radius)]

        draw_circle_inside(center, radius)
        circle_inside(ax, n - 1, center, radius/3)
        circle_inside(ax, n - 1,leftCircle , radius/3 )
        circle_inside(ax, n - 1, rightCircle, radius/3)
        circle_inside(ax, n - 1, topCircle, radius/3 )
        circle_inside(ax, n - 1, bottomCircle, radius/3   )


plt.close("all")
fig, ax = plt.subplots()
circle_inside(ax, 4, [100, 0], 100)
ax.set_aspect(1.0)
ax.axis('off')
plt.show()
fig.savefig('circles_inside.png')




